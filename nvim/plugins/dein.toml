[[plugins]]
repo = 'Shougo/dein.vim'

# "囲い文字"の追加や変更
[[plugins]]
repo = 'tpope/vim-surround'

# gcc でコメントのトグル
[[plugins]]
repo = "tpope/vim-commentary"


[[plugins]]
repo = "tpope/vim-fugitive"

[[plugins]]
repo = "itchyny/lightline.vim"
hook_add = '''
set showtabline=2               " タブラインの常時表示
set noshowmode                  " モードの表示をオフ(タブラインに表示させるため)
" ステータスラインの設定
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \     'left': [
    \         ['mode'],
    \         ['readonly','cwd','filename','modified','coc'],
    \     ],
    \     'right': [['close'],['gitbranch']],
    \     },
    \ 'inactive': {
    \     'left': [
    \         ['mode'],
    \         ['readonly','cwd','filename','modified'],
    \     ],
    \     'right': [['close'],['gitbranch']],
    \     },
    \ 'component_function': {
    \     'cwd': 'getcwd',
    \     'gitbranch': 'fugitive#head',
    \     'coc': 'coc#status'
    \     }
    \ }

'''

[[plugins]]
repo = "mbbill/undotree"
hook_add = '''
if has('persistent_undo')
    set undodir=~/.config/nvim/undo
    set undofile
endif
let g:undotree_WindowLayout = 2
let g:undotree_ShortIndicators = 1
let g:undotree_SplitWidth = 30
let g:undotree_SetFocusWhenToggle = 1
nnoremap <leader>u :UndotreeToggle<CR>
'''

# カラースキーム
[[plugins]]
repo = "rakr/vim-one"
hook_add = '''
colorscheme one
set background=dark
'''

[[plugins]]
repo = 'mhinz/vim-signify'

[[plugins]]
repo ="kristijanhusak/defx-icons"
hook_add = '''
let g:defx_icons_enable_syntax_highlight = 0
let g:defx_icons_column_length = 2
let g:defx_icons_directory_icon = ''
let g:defx_icons_mark_icon = '*'
let g:defx_icons_copy_icon = ''
let g:defx_icons_move_icon = ''
let g:defx_icons_parent_icon = ''
let g:defx_icons_default_icon = ''
let g:defx_icons_directory_symlink_icon = ''
'''

[[plugins]]
repo ="kristijanhusak/defx-git"
hook_add = '''
	let g:defx_git#indicators = {
		\ 'Modified'  : '+',
		\ 'Staged'    : '●',
		\ 'Untracked' : '?',
		\ 'Renamed'   : '➜',
		\ 'Unmerged'  : '═',
		\ 'Deleted'   : 'x',
		\ 'Unknown'   : '?'
		\ }
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
hook_add = '''
call defx#custom#column('filename', {
      \ 'min_width': 40,
      \ 'max_width': 40,
      \ })


call defx#custom#option('_', {
      \ 'columns': 'indent:git:icons:filename',
      \ 'show_ignored_files': 1,
      \ 'vertical_preview': 1,
      \ 'direction':'topleft',
      \ 'preview_width': 150,
      \ 'resume': 1,
      \ 'listed': 1,
      \ })

nnoremap <silent> <Leader>f :<C-u> Defx<CR>
autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
    nnoremap <silent><buffer><expr> c defx#do_action('copy')
    nnoremap <silent><buffer><expr> m defx#do_action('move')
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> l defx#do_action('open')
    nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d defx#do_action('remove')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('preview')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
    nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
  endfunction

'''

[[plugins]]
repo = "simeji/winresizer"

[[plugins]]
repo = "nvim-treesitter/nvim-treesitter"
hook_add = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
  },
  ensure_installed = {'python','typescript','toml','json'}, 
}
EOF
'''

[[plugins]]
repo="Shougo/deol.nvim"
hook_add='''
nnoremap <silent><C-o> :<C-u>Deol -split=farright -toggle<CR>
tnoremap <silent><C-o> <C-\><C-n>:<C-u>Deol -split=farright -toggle<CR>
'''

[[plugins]]
repo = "qpkorr/vim-renamer"

[[plugins]]
repo = "ripxorip/aerojump.nvim"
hook_add = '''
nmap <Leader>s <Plug>(AerojumpDefault)
let g:aerojump_keymaps = {
    \ "<C-j>": "AerojumpDown",
    \ "<C-k>": "AerojumpUp",
    \ "<C-h>": "AerojumpSelPrev",
    \ "<C-l>": "AerojumpSelNext",
    \ }
'''

[[plugins]]
repo = 'phaazon/hop.nvim'
hook_add = '''
nnoremap <Leader>k :HopWord<cr>
nnoremap <Leader>j :HopLine<cr>
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1 
'''

[[plugins]]
repo = "junegunn/fzf"
build = "./install --bin"
merged = "0"

[[plugins]]
repo = "junegunn/fzf.vim"
depends = ['fzf']
hook_add = '''
nnoremap ,b :Buffers<CR>
nnoremap ,f :Files<CR>
nnoremap ,g :GFiles<CR>
nnoremap ,r :Rg<CR>
'''

[[plugins]]
repo = "airblade/vim-rooter"
hook_add = '''
let g:rooter_change_directory_for_non_project_files = 'current'
'''

[[plugins]]
repo = "Shougo/vimproc.vim"
build = "make"

[[plugins]]
repo = "thinca/vim-quickrun"
hook_add = '''
" vimprocで非同期実行
" 成功時にバッファ、失敗時にQuickFixで表示
" 結果表示のサイズ調整など
let g:quickrun_config = {
    \ '_' : {
        \ 'runner' : 'vimproc',
        \ 'runner/vimproc/updatetime' : 40,
        \ 'outputter' : 'error',
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error'   : 'quickfix',
        \ 'outputter/buffer/split' : ':botright 8sp',
    \ },
    \ 'rust' : {
        \ 'exec' : 'cargo run'
    \ }
\}

" 実行時に前回の表示内容をクローズ&保存してから実行
let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
'''

[[plugins]]
repo = 'wfxr/minimap.vim'
hook_add='''
let g:minimap_auto_start = 0
nnoremap <silent><Leader>m :MinimapToggle<CR>
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = "vim-denops/denops.vim"
[[plugins]]
repo = "Shougo/ddc-around"
[[plugins]]
repo = "Shougo/ddc-matcher_head"
[[plugins]]
repo = "Shougo/ddc-sorter_rank"
[[plugins]]
repo = "Shougo/ddc-nvim-lsp"
[[plugins]]
repo = "Shougo/ddc.vim"
hook_add='''
" Customize global settings
" Use around source.
call ddc#custom#patch_global('sources', ['nvim-lsp','around'])

" Use matcher_head and sorter_rank.
call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank'] },
      \ 'nvim-lsp': {
      \ 'mark': 'LSP',
      \ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \ },
      \ })

" Change source options
call ddc#custom#patch_global('sourceOptions', {
      \ 'around': {'mark': 'around'},
      \ })
call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

" Mappings
" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ pumvisible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'

" Use ddc.
call ddc#enable()
'''

[[plugins]]
repo = "neovim/nvim-lspconfig"
[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'
[[plugins]]
repo = 'matsui54/ddc-nvim-lsp-doc'
on_source = 'ddc.vim'
hook_source = '''
 let g:ddc_nvim_lsp_doc_config = {
      \ 'documentation': {
      \   'enable': v:true,
      \   'border': 'single',
      \   'maxWidth': 60,
      \   'maxHeight': 30,
      \ },
      \ 'signature': {
      \   'maxHeight': 5,
      \ },
      \ }
  call ddc_nvim_lsp_doc#enable()
'''

# for null-ls
[[plugins]] 
repo = "nvim-lua/plenary.nvim"
[[plugins]]
repo = "jose-elias-alvarez/null-ls.nvim"
on_source = 'nvim-lspconfig'

[[plugins]]
repo = "jose-elias-alvarez/nvim-lsp-ts-utils"
on_source = 'nvim-lspconfig'


# for trouble
[[plugins]]
repo = "kyazdani42/nvim-web-devicons"
[[plugins]]
repo = "folke/trouble.nvim"
hook_add = '''
lua << EOF
  require("trouble").setup {
    signs = {
        error = "🤬",
        warning = "🥺",
        hint = "🤔",
        information = "🥺",
        other = "﫠"
    },
  }
EOF
nnoremap <leader>tr <cmd>TroubleToggle<cr>
'''

