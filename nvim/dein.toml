[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
rev = "release"
hook_add = '''
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)

" Create mappings for function text object, requires document symbols feature of languageserver.

xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)


" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>et g:coc_start_at_startup = 1
'''

# "囲い文字"の追加や変更
[[plugins]]
repo = 'tpope/vim-surround'

# gcc でコメントのトグル
[[plugins]]
repo = "tpope/vim-commentary"


[[plugins]]
repo = "tpope/vim-fugitive"

[[plugins]]
repo = "itchyny/lightline.vim"
hook_add = '''
set showtabline=2               " タブラインの常時表示
set noshowmode                  " モードの表示をオフ(タブラインに表示させるため)
" ステータスラインの設定
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \     'left': [
    \         ['mode'],
    \         ['readonly','cwd','filename','modified','coc'],
    \     ],
    \     'right': [['close'],['gitbranch']],
    \     },
    \ 'inactive': {
    \     'left': [
    \         ['mode'],
    \         ['readonly','cwd','filename','modified'],
    \     ],
    \     'right': [['close'],['gitbranch']],
    \     },
    \ 'component_function': {
    \     'cwd': 'getcwd',
    \     'gitbranch': 'fugitive#head',
    \     'coc': 'coc#status'
    \     }
    \ }

'''

[[plugins]]
repo = "mbbill/undotree"
hook_add = '''
if has('persistent_undo')
    set undodir=~/.config/nvim/undo
    set undofile
endif
let g:undotree_WindowLayout = 2
let g:undotree_ShortIndicators = 1
let g:undotree_SplitWidth = 30
let g:undotree_SetFocusWhenToggle = 1
nnoremap <leader>u :UndotreeToggle<CR>
'''

# カラースキーム
[[plugins]]
repo = "mhartington/oceanic-next"
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので確実に読まれている VimEnter のタイミングで行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  autocmd VimEnter * nested colorscheme OceanicNext
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo ="kristijanhusak/defx-icons"
hook_add = '''
let g:defx_icons_enable_syntax_highlight = 0
let g:defx_icons_column_length = 2
let g:defx_icons_directory_icon = ''
let g:defx_icons_mark_icon = '*'
let g:defx_icons_copy_icon = ''
let g:defx_icons_move_icon = ''
let g:defx_icons_parent_icon = ''
let g:defx_icons_default_icon = ''
let g:defx_icons_directory_symlink_icon = ''
'''

[[plugins]]
repo ="kristijanhusak/defx-git"
hook_add = '''
	let g:defx_git#indicators = {
		\ 'Modified'  : '+',
		\ 'Staged'    : '●',
		\ 'Untracked' : '?',
		\ 'Renamed'   : '➜',
		\ 'Unmerged'  : '═',
		\ 'Deleted'   : 'x',
		\ 'Unknown'   : '?'
		\ }
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
hook_add = '''
call defx#custom#column('filename', {
      \ 'min_width': 40,
      \ 'max_width': 40,
      \ })


call defx#custom#option('_', {
      \ 'columns': 'indent:git:icons:filename',
      \ 'show_ignored_files': 1,
      \ 'vertical_preview': 1,
      \ 'direction':'topleft',
      \ 'preview_width': 150,
      \ 'resume': 1,
      \ 'listed': 1,
      \ })

nnoremap <silent> <Leader>f :<C-u> Defx<CR>
autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
    nnoremap <silent><buffer><expr> c defx#do_action('copy')
    nnoremap <silent><buffer><expr> m defx#do_action('move')
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> l defx#do_action('open')
    nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d defx#do_action('remove')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('preview')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
    nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
  endfunction

'''

[[plugins]]
repo = "wakatime/vim-wakatime"


[[plugins]]
repo = "ctrlpvim/ctrlp.vim"
hook_add = '''
let g:ctrlp_map = '<Leader>p'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
'''


[[plugins]]
repo = "simeji/winresizer"

[[plugins]]
repo = "yuttie/comfortable-motion.vim"

[[plugins]]
repo = "nvim-treesitter/nvim-treesitter"
hook_add = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
  },
  ensure_installed = {'python','typescript','toml','json'}, 
}
EOF
'''

[[plugins]]
repo="Shougo/deol.nvim"
hook_add='''
nnoremap <silent><C-o> :<C-u>Deol -split=farright -toggle<CR>
tnoremap <silent><C-o> <C-\><C-n>:<C-u>Deol -split=farright -toggle<CR>
'''

[[plugins]]
repo = "qpkorr/vim-renamer"


[[plugins]]
repo = "mattn/efm-langserver"

[[plugins]]
repo = "ripxorip/aerojump.nvim"
hook_add = '''
nmap <Leader>s <Plug>(AerojumpDefault)
let g:aerojump_keymaps = {
    \ "<C-j>": "AerojumpDown",
    \ "<C-k>": "AerojumpUp",
    \ "<C-h>": "AerojumpSelPrev",
    \ "<C-l>": "AerojumpSelNext",
    \ }
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1 
'''
